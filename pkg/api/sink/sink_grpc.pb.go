// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SinkClient is the client API for Sink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SinkClient interface {
	Sink(ctx context.Context, in *SinkRequest, opts ...grpc.CallOption) (*SinkResponse, error)
	Unsink(ctx context.Context, in *UnsinkRequest, opts ...grpc.CallOption) (*UnsinkResponse, error)
}

type sinkClient struct {
	cc grpc.ClientConnInterface
}

func NewSinkClient(cc grpc.ClientConnInterface) SinkClient {
	return &sinkClient{cc}
}

func (c *sinkClient) Sink(ctx context.Context, in *SinkRequest, opts ...grpc.CallOption) (*SinkResponse, error) {
	out := new(SinkResponse)
	err := c.cc.Invoke(ctx, "/github.go_sink.sink.Sink/Sink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinkClient) Unsink(ctx context.Context, in *UnsinkRequest, opts ...grpc.CallOption) (*UnsinkResponse, error) {
	out := new(UnsinkResponse)
	err := c.cc.Invoke(ctx, "/github.go_sink.sink.Sink/Unsink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SinkServer is the server API for Sink service.
// All implementations must embed UnimplementedSinkServer
// for forward compatibility
type SinkServer interface {
	Sink(context.Context, *SinkRequest) (*SinkResponse, error)
	Unsink(context.Context, *UnsinkRequest) (*UnsinkResponse, error)
	mustEmbedUnimplementedSinkServer()
}

// UnimplementedSinkServer must be embedded to have forward compatible implementations.
type UnimplementedSinkServer struct {
}

func (UnimplementedSinkServer) Sink(context.Context, *SinkRequest) (*SinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sink not implemented")
}
func (UnimplementedSinkServer) Unsink(context.Context, *UnsinkRequest) (*UnsinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsink not implemented")
}
func (UnimplementedSinkServer) mustEmbedUnimplementedSinkServer() {}

// UnsafeSinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SinkServer will
// result in compilation errors.
type UnsafeSinkServer interface {
	mustEmbedUnimplementedSinkServer()
}

func RegisterSinkServer(s grpc.ServiceRegistrar, srv SinkServer) {
	s.RegisterService(&Sink_ServiceDesc, srv)
}

func _Sink_Sink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkServer).Sink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.go_sink.sink.Sink/Sink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkServer).Sink(ctx, req.(*SinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sink_Unsink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkServer).Unsink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.go_sink.sink.Sink/Unsink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkServer).Unsink(ctx, req.(*UnsinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sink_ServiceDesc is the grpc.ServiceDesc for Sink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.go_sink.sink.Sink",
	HandlerType: (*SinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sink",
			Handler:    _Sink_Sink_Handler,
		},
		{
			MethodName: "Unsink",
			Handler:    _Sink_Unsink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sink/sink.proto",
}
